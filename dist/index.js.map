{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n// MODULES //\n\nvar isFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' );\nvar isRealFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-real-floating-point-data-type' );\nvar isComplexFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' );\nvar isIntegerDataType = require( '@stdlib/ndarray-base-assert-is-integer-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isRealDataType = require( '@stdlib/ndarray-base-assert-is-real-data-type' );\nvar isNumericDataType = require( '@stdlib/ndarray-base-assert-is-numeric-data-type' );\nvar isBooleanDataType = require( '@stdlib/ndarray-base-assert-is-boolean-data-type' );\nvar isIntegerIndexDataType = require( '@stdlib/ndarray-base-assert-is-integer-index-data-type' );\nvar isBooleanIndexDataType = require( '@stdlib/ndarray-base-assert-is-boolean-index-data-type' );\nvar isMaskIndexDataType = require( '@stdlib/ndarray-base-assert-is-mask-index-data-type' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar promotionRules = require( '@stdlib/ndarray-promotion-rules' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_INDEX_DTYPE = defaults.get( 'dtypes.default_index' );\nvar DEFAULT_SIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.signed_integer' );\nvar DEFAULT_UNSIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.unsigned_integer' );\nvar DEFAULT_REAL_FLOATING_POINT_DTYPE = defaults.get( 'dtypes.real_floating_point' );\n\n// Table where, for each respective policy, the value is a function which applies the policy to an input data type...\nvar POLICY_TABLE1 = {\n\t'default': defaultPolicy,\n\t'default_index': defaultIndexPolicy,\n\t'same': samePolicy,\n\t'promoted': promotedPolicy,\n\t'accumulation': accumulationPolicy\n};\n\n// Table where, for each respective policy, the value is an array whose first element is an assertion and whose second element is a fallback data type...\nvar POLICY_TABLE2 = {\n\t// Floating-point policies...\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'floating_point_and_generic': [\n\t\twrap( isFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'real_floating_point_and_generic': [\n\t\twrap( isRealFloatingPointDataType ),\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\t'complex_floating_point_and_generic': [\n\t\twrap( isComplexFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t// Integer policies...\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'integer_and_generic': [\n\t\twrap( isIntegerDataType ),\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'signed_integer_and_generic': [\n\t\twrap( isSignedIntegerDataType ),\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer_and_generic': [\n\t\twrap( isUnsignedIntegerDataType ),\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\n\t// Real-valued number policies...\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\t'real_and_generic': [\n\t\twrap( isRealDataType ),\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t// Real- and complex-valued number policies...\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\t'numeric_and_generic': [\n\t\twrap( isNumericDataType ),\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\n\t// Boolean policies...\n\t'boolean': [\n\t\tisBooleanDataType,\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\t'boolean_and_generic': [\n\t\twrap( isBooleanDataType ),\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\n\t// Index policies...\n\t'integer_index': [\n\t\tisIntegerIndexDataType,\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'integer_index_and_generic': [\n\t\twrap( isIntegerIndexDataType ),\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'boolean_index': [\n\t\tisBooleanIndexDataType,\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'boolean_index_and_generic': [\n\t\twrap( isBooleanIndexDataType ),\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'mask_index': [\n\t\tisMaskIndexDataType,\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t],\n\t'mask_index_and_generic': [\n\t\twrap( isMaskIndexDataType ),\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t]\n};\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a data type validation function to also check for a \"generic\" data type.\n*\n* @private\n* @param {Function} fcn - validation function\n* @returns {Function} wrapped validation function\n*/\nfunction wrap( fcn ) {\n\treturn wrapper;\n\n\t/**\n\t* Tests whether a provided data type is either \"generic\" or satisfies a data type validation function.\n\t*\n\t* @private\n\t* @param {*} value - input value\n\t* @returns {boolean} boolean indicating whether a provided value passes a test\n\t*/\n\tfunction wrapper( value ) {\n\t\treturn ( value === 'generic' ) || fcn( value );\n\t}\n}\n\n/**\n* Returns the default data type.\n*\n* @private\n* @returns {string} output ndarray data type\n*/\nfunction defaultPolicy() {\n\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\treturn DEFAULT_DTYPE;\n}\n\n/**\n* Returns the default index data type.\n*\n* @private\n* @returns {string} output ndarray data type\n*/\nfunction defaultIndexPolicy() {\n\t// When the policy is \"default_index\", the output data type should always be the default index data type without consideration for the input data type:\n\treturn DEFAULT_INDEX_DTYPE;\n}\n\n/**\n* Applies the \"same\" policy by returning the input data type.\n*\n* @private\n* @param {string} dtype - input ndarray data type\n* @returns {string} output ndarray data type\n*/\nfunction samePolicy( dtype ) {\n\treturn dtype;\n}\n\n/**\n* Applies the \"promoted\" policy by returning the input data type, as applying type promotion to a single data type is a no-op.\n*\n* @private\n* @param {string} dtype - input ndarray data type\n* @returns {string} output ndarray data type\n*/\nfunction promotedPolicy( dtype ) {\n\treturn dtype;\n}\n\n/**\n* Applies the \"accumulation\" policy to an input data type.\n*\n* @private\n* @param {string} dtype - input ndarray data type\n* @returns {string} output ndarray data type\n*/\nfunction accumulationPolicy( dtype ) {\n\t// If the input data type is floating-point, allow accumulation in that data type as overflow/underflow is handled naturally as a built-in feature of that data type...\n\tif ( isFloatingPointDataType( dtype ) || dtype === 'generic' ) { // NOTE: we may want to revisit this in the future for float16/complex32, where the value range is much more limited\n\t\treturn dtype;\n\t}\n\t// Unless the input data type value range is larger than the default un/signed integer data type, accumulate in the default un/signed integer data type, as accumulating in small range integer data types (e.g., `int8`) are at high risk for overflow, especially for ndarrays containing many elements...\n\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\treturn promotionRules( dtype, DEFAULT_UNSIGNED_INTEGER_DTYPE );\n\t}\n\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\treturn promotionRules( dtype, DEFAULT_SIGNED_INTEGER_DTYPE );\n\t}\n\t// For all other input data types, accumulate in the default real-valued floating-point data type...\n\treturn DEFAULT_REAL_FLOATING_POINT_DTYPE;\n}\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p = POLICY_TABLE1[ policy ];\n\tif ( p !== void 0 ) {\n\t\treturn p( dtype );\n\t}\n\tp = POLICY_TABLE2[ policy ];\n\tif ( p !== void 0 ) {\n\t\tif ( p[ 0 ]( dtype ) ) {\n\t\t\treturn dtype;\n\t\t}\n\t\treturn p[ 1 ];\n\t}\n\tif ( isDataType( policy ) ) {\n\t\treturn policy;\n\t}\n\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type policy. Value: `%s`.', policy ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolve;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve the output ndarray data type for a unary function.\n*\n* @module @stdlib/ndarray-base-unary-output-dtype\n*\n* @example\n* var resolve = require( '@stdlib/ndarray-base-unary-output-dtype' );\n*\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFloatingPointDataType", "isRealFloatingPointDataType", "isComplexFloatingPointDataType", "isIntegerDataType", "isSignedIntegerDataType", "isUnsignedIntegerDataType", "isRealDataType", "isNumericDataType", "isBooleanDataType", "isIntegerIndexDataType", "isBooleanIndexDataType", "isMaskIndexDataType", "isDataType", "promotionRules", "defaults", "format", "DEFAULT_DTYPE", "DEFAULT_INDEX_DTYPE", "DEFAULT_SIGNED_INTEGER_DTYPE", "DEFAULT_UNSIGNED_INTEGER_DTYPE", "DEFAULT_REAL_FLOATING_POINT_DTYPE", "POLICY_TABLE1", "defaultPolicy", "defaultIndexPolicy", "samePolicy", "promotedPolicy", "accumulationPolicy", "POLICY_TABLE2", "wrap", "fcn", "wrapper", "value", "dtype", "resolve", "policy", "p", "main"]
}
