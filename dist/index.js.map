{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' );\nvar isRealFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-real-floating-point-data-type' ); // eslint-disable-line id-length\nvar isComplexFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' ); // eslint-disable-line id-length\nvar isIntegerDataType = require( '@stdlib/ndarray-base-assert-is-integer-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isRealDataType = require( '@stdlib/ndarray-base-assert-is-real-data-type' );\nvar isNumericDataType = require( '@stdlib/ndarray-base-assert-is-numeric-data-type' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar POLICY_TABLE = {\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.real_floating_point' )\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.signed_integer' )\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.unsigned_integer' )\n\t],\n\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t]\n};\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p;\n\tif ( policy === 'default' ) {\n\t\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\t\treturn DEFAULT_DTYPE;\n\t}\n\tif ( policy === 'same' || policy === 'promoted' ) { // note: for unary APIs, the \"promoted\" data type is the same as the input data type\n\t\treturn dtype;\n\t}\n\tif ( policy === 'bool' ) {\n\t\tthrow new Error( 'not implemented' ); // TODO: update once the `bool` dtype is supported\n\t}\n\tp = POLICY_TABLE[ policy ];\n\tif ( p === void 0 ) {\n\t\t// Check for an explicit data type...\n\t\tif ( isDataType( policy ) ) {\n\t\t\treturn policy;\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type policy. Value: `%s`.', policy ) );\n\t}\n\tif ( p[ 0 ]( dtype ) ) {\n\t\treturn dtype;\n\t}\n\treturn p[ 1 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolve;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve the output ndarray data type for a unary function.\n*\n* @module @stdlib/ndarray-base-unary-output-dtype\n*\n* @example\n* var resolve = require( '@stdlib/ndarray-base-unary-output-dtype' );\n*\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAA0B,QAAS,yDAA0D,EAC7FC,EAA8B,QAAS,8DAA+D,EACtGC,EAAiC,QAAS,iEAAkE,EAC5GC,EAAoB,QAAS,kDAAmD,EAChFC,EAA0B,QAAS,yDAA0D,EAC7FC,EAA4B,QAAS,2DAA4D,EACjGC,EAAiB,QAAS,+CAAgD,EAC1EC,EAAoB,QAAS,kDAAmD,EAChFC,EAAa,QAAS,0CAA2C,EACjEC,EAAW,QAAS,0BAA2B,EAC/CC,EAAS,QAAS,uBAAwB,EAK1CC,EAAe,CAClB,eAAkB,CACjBX,EACAS,EAAS,IAAK,uBAAwB,CACvC,EACA,oBAAuB,CACtBR,EACAQ,EAAS,IAAK,4BAA6B,CAC5C,EACA,uBAA0B,CACzBP,EACAO,EAAS,IAAK,+BAAgC,CAC/C,EAEA,QAAW,CACVN,EACAM,EAAS,IAAK,gBAAiB,CAChC,EACA,eAAkB,CACjBL,EACAK,EAAS,IAAK,uBAAwB,CACvC,EACA,iBAAoB,CACnBJ,EACAI,EAAS,IAAK,yBAA0B,CACzC,EAEA,KAAQ,CACPH,EACAG,EAAS,IAAK,aAAc,CAC7B,EAEA,QAAW,CACVF,EACAE,EAAS,IAAK,gBAAiB,CAChC,CACD,EACIG,EAAgBH,EAAS,IAAK,gBAAiB,EAkBnD,SAASI,EAASC,EAAOC,EAAS,CACjC,IAAIC,EACJ,GAAKD,IAAW,UAEf,OAAOH,EAER,GAAKG,IAAW,QAAUA,IAAW,WACpC,OAAOD,EAER,GAAKC,IAAW,OACf,MAAM,IAAI,MAAO,iBAAkB,EAGpC,GADAC,EAAIL,EAAcI,CAAO,EACpBC,IAAM,OAAS,CAEnB,GAAKR,EAAYO,CAAO,EACvB,OAAOA,EAER,MAAM,IAAI,UAAWL,EAAQ,uFAAwFK,CAAO,CAAE,CAC/H,CACA,OAAKC,EAAG,CAAE,EAAGF,CAAM,EACXA,EAEDE,EAAG,CAAE,CACb,CAKAjB,EAAO,QAAUc,ICvFjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFloatingPointDataType", "isRealFloatingPointDataType", "isComplexFloatingPointDataType", "isIntegerDataType", "isSignedIntegerDataType", "isUnsignedIntegerDataType", "isRealDataType", "isNumericDataType", "isDataType", "defaults", "format", "POLICY_TABLE", "DEFAULT_DTYPE", "resolve", "dtype", "policy", "p", "main"]
}
