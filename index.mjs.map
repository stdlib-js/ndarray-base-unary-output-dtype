{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n// MODULES //\n\nimport isFloatingPointDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isRealFloatingPointDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type';\nimport isComplexFloatingPointDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isIntegerDataType from '@stdlib/ndarray-base-assert-is-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isRealDataType from '@stdlib/ndarray-base-assert-is-real-data-type';\nimport isNumericDataType from '@stdlib/ndarray-base-assert-is-numeric-data-type';\nimport isBooleanDataType from '@stdlib/ndarray-base-assert-is-boolean-data-type';\nimport isIntegerIndexDataType from '@stdlib/ndarray-base-assert-is-integer-index-data-type';\nimport isBooleanIndexDataType from '@stdlib/ndarray-base-assert-is-boolean-index-data-type';\nimport isMaskIndexDataType from '@stdlib/ndarray-base-assert-is-mask-index-data-type';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport promotionRules from '@stdlib/ndarray-promotion-rules';\nimport defaults from '@stdlib/ndarray-defaults';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_INDEX_DTYPE = defaults.get( 'dtypes.default_index' );\nvar DEFAULT_SIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.signed_integer' );\nvar DEFAULT_UNSIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.unsigned_integer' );\nvar DEFAULT_REAL_FLOATING_POINT_DTYPE = defaults.get( 'dtypes.real_floating_point' );\n\n// Table where, for each respective policy, the value is a function which applies the policy to an input data type...\nvar POLICY_TABLE1 = {\n\t'default': defaultPolicy,\n\t'default_index': defaultIndexPolicy,\n\t'same': samePolicy,\n\t'promoted': promotedPolicy,\n\t'accumulation': accumulationPolicy\n};\n\n// Table where, for each respective policy, the value is an array whose first element is an assertion and whose second element is a fallback data type...\nvar POLICY_TABLE2 = {\n\t// Floating-point policies...\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'floating_point_and_generic': [\n\t\twrap( isFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'real_floating_point_and_generic': [\n\t\twrap( isRealFloatingPointDataType ),\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\t'complex_floating_point_and_generic': [\n\t\twrap( isComplexFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t// Integer policies...\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'integer_and_generic': [\n\t\twrap( isIntegerDataType ),\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'signed_integer_and_generic': [\n\t\twrap( isSignedIntegerDataType ),\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer_and_generic': [\n\t\twrap( isUnsignedIntegerDataType ),\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\n\t// Real-valued number policies...\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\t'real_and_generic': [\n\t\twrap( isRealDataType ),\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t// Real- and complex-valued number policies...\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\t'numeric_and_generic': [\n\t\twrap( isNumericDataType ),\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\n\t// Boolean policies...\n\t'boolean': [\n\t\tisBooleanDataType,\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\t'boolean_and_generic': [\n\t\twrap( isBooleanDataType ),\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\n\t// Index policies...\n\t'integer_index': [\n\t\tisIntegerIndexDataType,\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'integer_index_and_generic': [\n\t\twrap( isIntegerIndexDataType ),\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'boolean_index': [\n\t\tisBooleanIndexDataType,\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'boolean_index_and_generic': [\n\t\twrap( isBooleanIndexDataType ),\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'mask_index': [\n\t\tisMaskIndexDataType,\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t],\n\t'mask_index_and_generic': [\n\t\twrap( isMaskIndexDataType ),\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t]\n};\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a data type validation function to also check for a \"generic\" data type.\n*\n* @private\n* @param {Function} fcn - validation function\n* @returns {Function} wrapped validation function\n*/\nfunction wrap( fcn ) {\n\treturn wrapper;\n\n\t/**\n\t* Tests whether a provided data type is either \"generic\" or satisfies a data type validation function.\n\t*\n\t* @private\n\t* @param {*} value - input value\n\t* @returns {boolean} boolean indicating whether a provided value passes a test\n\t*/\n\tfunction wrapper( value ) {\n\t\treturn ( value === 'generic' ) || fcn( value );\n\t}\n}\n\n/**\n* Returns the default data type.\n*\n* @private\n* @returns {string} output ndarray data type\n*/\nfunction defaultPolicy() {\n\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\treturn DEFAULT_DTYPE;\n}\n\n/**\n* Returns the default index data type.\n*\n* @private\n* @returns {string} output ndarray data type\n*/\nfunction defaultIndexPolicy() {\n\t// When the policy is \"default_index\", the output data type should always be the default index data type without consideration for the input data type:\n\treturn DEFAULT_INDEX_DTYPE;\n}\n\n/**\n* Applies the \"same\" policy by returning the input data type.\n*\n* @private\n* @param {string} dtype - input ndarray data type\n* @returns {string} output ndarray data type\n*/\nfunction samePolicy( dtype ) {\n\treturn dtype;\n}\n\n/**\n* Applies the \"promoted\" policy by returning the input data type, as applying type promotion to a single data type is a no-op.\n*\n* @private\n* @param {string} dtype - input ndarray data type\n* @returns {string} output ndarray data type\n*/\nfunction promotedPolicy( dtype ) {\n\treturn dtype;\n}\n\n/**\n* Applies the \"accumulation\" policy to an input data type.\n*\n* @private\n* @param {string} dtype - input ndarray data type\n* @returns {string} output ndarray data type\n*/\nfunction accumulationPolicy( dtype ) {\n\t// If the input data type is floating-point, allow accumulation in that data type as overflow/underflow is handled naturally as a built-in feature of that data type...\n\tif ( isFloatingPointDataType( dtype ) || dtype === 'generic' ) { // NOTE: we may want to revisit this in the future for float16/complex32, where the value range is much more limited\n\t\treturn dtype;\n\t}\n\t// Unless the input data type value range is larger than the default un/signed integer data type, accumulate in the default un/signed integer data type, as accumulating in small range integer data types (e.g., `int8`) are at high risk for overflow, especially for ndarrays containing many elements...\n\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\treturn promotionRules( dtype, DEFAULT_UNSIGNED_INTEGER_DTYPE );\n\t}\n\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\treturn promotionRules( dtype, DEFAULT_SIGNED_INTEGER_DTYPE );\n\t}\n\t// For all other input data types, accumulate in the default real-valued floating-point data type...\n\treturn DEFAULT_REAL_FLOATING_POINT_DTYPE;\n}\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p = POLICY_TABLE1[ policy ];\n\tif ( p !== void 0 ) {\n\t\treturn p( dtype );\n\t}\n\tp = POLICY_TABLE2[ policy ];\n\tif ( p !== void 0 ) {\n\t\tif ( p[ 0 ]( dtype ) ) {\n\t\t\treturn dtype;\n\t\t}\n\t\treturn p[ 1 ];\n\t}\n\tif ( isDataType( policy ) ) {\n\t\treturn policy;\n\t}\n\tthrow new TypeError( format( '1dRDw', policy ) );\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n"],"names":["DEFAULT_DTYPE","defaults","get","DEFAULT_INDEX_DTYPE","DEFAULT_SIGNED_INTEGER_DTYPE","DEFAULT_UNSIGNED_INTEGER_DTYPE","DEFAULT_REAL_FLOATING_POINT_DTYPE","POLICY_TABLE1","default","default_index","same","dtype","promoted","accumulation","isFloatingPointDataType","isUnsignedIntegerDataType","promotionRules","isSignedIntegerDataType","POLICY_TABLE2","floating_point","floating_point_and_generic","wrap","real_floating_point","isRealFloatingPointDataType","real_floating_point_and_generic","complex_floating_point","isComplexFloatingPointDataType","complex_floating_point_and_generic","integer","isIntegerDataType","integer_and_generic","signed_integer","signed_integer_and_generic","unsigned_integer","unsigned_integer_and_generic","real","isRealDataType","real_and_generic","numeric","isNumericDataType","numeric_and_generic","boolean","isBooleanDataType","boolean_and_generic","integer_index","isIntegerIndexDataType","integer_index_and_generic","boolean_index","isBooleanIndexDataType","boolean_index_and_generic","mask_index","isMaskIndexDataType","mask_index_and_generic","fcn","value","resolve","policy","p","isDataType","TypeError","format"],"mappings":";;sxDA4CA,IAAIA,EAAgBC,EAASC,IAAK,kBAC9BC,EAAsBF,EAASC,IAAK,wBACpCE,EAA+BH,EAASC,IAAK,yBAC7CG,EAAiCJ,EAASC,IAAK,2BAC/CI,EAAoCL,EAASC,IAAK,8BAGlDK,EAAgB,CACnBC,QAqJD,WAEC,OAAOR,CACR,EAvJCS,cA+JD,WAEC,OAAON,CACR,EAjKCO,KA0KD,SAAqBC,GACpB,OAAOA,CACR,EA3KCC,SAoLD,SAAyBD,GACxB,OAAOA,CACR,EArLCE,aA8LD,SAA6BF,GAE5B,GAAKG,EAAyBH,IAAqB,YAAVA,EACxC,OAAOA,EAGR,GAAKI,EAA2BJ,GAC/B,OAAOK,EAAgBL,EAAON,GAE/B,GAAKY,EAAyBN,GAC7B,OAAOK,EAAgBL,EAAOP,GAG/B,OAAOE,CACR,GAxMIY,EAAgB,CAEnBC,eAAkB,CACjBL,EACAb,EAASC,IAAK,0BAEfkB,2BAA8B,CAC7BC,EAAMP,GACNb,EAASC,IAAK,0BAEfoB,oBAAuB,CACtBC,EACAjB,GAEDkB,gCAAmC,CAClCH,EAAME,GACNjB,GAEDmB,uBAA0B,CACzBC,EACAzB,EAASC,IAAK,kCAEfyB,mCAAsC,CACrCN,EAAMK,GACNzB,EAASC,IAAK,kCAIf0B,QAAW,CACVC,EACA5B,EAASC,IAAK,mBAEf4B,oBAAuB,CACtBT,EAAMQ,GACN5B,EAASC,IAAK,mBAEf6B,eAAkB,CACjBd,EACAb,GAED4B,2BAA8B,CAC7BX,EAAMJ,GACNb,GAED6B,iBAAoB,CACnBlB,EACAV,GAED6B,6BAAgC,CAC/Bb,EAAMN,GACNV,GAID8B,KAAQ,CACPC,EACAnC,EAASC,IAAK,gBAEfmC,iBAAoB,CACnBhB,EAAMe,GACNnC,EAASC,IAAK,gBAIfoC,QAAW,CACVC,EACAtC,EAASC,IAAK,mBAEfsC,oBAAuB,CACtBnB,EAAMkB,GACNtC,EAASC,IAAK,mBAIfuC,QAAW,CACVC,EACAzC,EAASC,IAAK,mBAEfyC,oBAAuB,CACtBtB,EAAMqB,GACNzC,EAASC,IAAK,mBAIf0C,cAAiB,CAChBC,EACA5C,EAASC,IAAK,yBAEf4C,0BAA6B,CAC5BzB,EAAMwB,GACN5C,EAASC,IAAK,yBAEf6C,cAAiB,CAChBC,EACA/C,EAASC,IAAK,yBAEf+C,0BAA6B,CAC5B5B,EAAM2B,GACN/C,EAASC,IAAK,yBAEfgD,WAAc,CACbC,EACAlD,EAASC,IAAK,sBAEfkD,uBAA0B,CACzB/B,EAAM8B,GACNlD,EAASC,IAAK,uBAchB,SAASmB,EAAMgC,GACd,OASA,SAAkBC,GACjB,MAAmB,YAAVA,GAAyBD,EAAKC,EACvC,CACF,CAqFA,SAASC,EAAS5C,EAAO6C,GACxB,IAAIC,EAAIlD,EAAeiD,GACvB,QAAW,IAANC,EACJ,OAAOA,EAAG9C,GAGX,QAAW,KADX8C,EAAIvC,EAAesC,IAElB,OAAKC,EAAG,GAAK9C,GACLA,EAED8C,EAAG,GAEX,GAAKC,EAAYF,GAChB,OAAOA,EAER,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,GACvC"}