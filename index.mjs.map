{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloatingPointDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isRealFloatingPointDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type'; // eslint-disable-line id-length\nimport isComplexFloatingPointDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type'; // eslint-disable-line id-length\nimport isIntegerDataType from '@stdlib/ndarray-base-assert-is-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isRealDataType from '@stdlib/ndarray-base-assert-is-real-data-type';\nimport isNumericDataType from '@stdlib/ndarray-base-assert-is-numeric-data-type';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport defaults from '@stdlib/ndarray-defaults';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar POLICY_TABLE = {\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.real_floating_point' )\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.signed_integer' )\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.unsigned_integer' )\n\t],\n\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t]\n};\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p;\n\tif ( policy === 'default' ) {\n\t\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\t\treturn DEFAULT_DTYPE;\n\t}\n\tif ( policy === 'same' || policy === 'promoted' ) { // note: for unary APIs, the \"promoted\" data type is the same as the input data type\n\t\treturn dtype;\n\t}\n\tif ( policy === 'bool' ) {\n\t\tthrow new Error( format('1dR00') ); // TODO: update once the `bool` dtype is supported\n\t}\n\tp = POLICY_TABLE[ policy ];\n\tif ( p === void 0 ) {\n\t\t// Check for an explicit data type...\n\t\tif ( isDataType( policy ) ) {\n\t\t\treturn policy;\n\t\t}\n\t\tthrow new TypeError( format( '1dRDw', policy ) );\n\t}\n\tif ( p[ 0 ]( dtype ) ) {\n\t\treturn dtype;\n\t}\n\treturn p[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n"],"names":["POLICY_TABLE","floating_point","isFloatingPointDataType","defaults","get","real_floating_point","isRealFloatingPointDataType","complex_floating_point","isComplexFloatingPointDataType","integer","isIntegerDataType","signed_integer","isSignedIntegerDataType","unsigned_integer","isUnsignedIntegerDataType","real","isRealDataType","numeric","isNumericDataType","DEFAULT_DTYPE","resolve","dtype","policy","p","Error","format","isDataType","TypeError"],"mappings":";;8uCAqCA,IAAIA,EAAe,CAClBC,eAAkB,CACjBC,EACAC,EAASC,IAAK,0BAEfC,oBAAuB,CACtBC,EACAH,EAASC,IAAK,+BAEfG,uBAA0B,CACzBC,EACAL,EAASC,IAAK,kCAGfK,QAAW,CACVC,EACAP,EAASC,IAAK,mBAEfO,eAAkB,CACjBC,EACAT,EAASC,IAAK,0BAEfS,iBAAoB,CACnBC,EACAX,EAASC,IAAK,4BAGfW,KAAQ,CACPC,EACAb,EAASC,IAAK,gBAGfa,QAAW,CACVC,EACAf,EAASC,IAAK,oBAGZe,EAAgBhB,EAASC,IAAK,kBAkBlC,SAASgB,EAASC,EAAOC,GACxB,IAAIC,EACJ,GAAgB,YAAXD,EAEJ,OAAOH,EAER,GAAgB,SAAXG,GAAgC,aAAXA,EACzB,OAAOD,EAER,GAAgB,SAAXC,EACJ,MAAM,IAAIE,MAAOC,EAAO,UAGzB,QAAW,KADXF,EAAIvB,EAAcsB,IACE,CAEnB,GAAKI,EAAYJ,GAChB,OAAOA,EAER,MAAM,IAAIK,UAAWF,EAAQ,QAASH,GACtC,CACD,OAAKC,EAAG,GAAKF,GACLA,EAEDE,EAAG,EACX"}