{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n// MODULES //\n\nimport isFloatingPointDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isRealFloatingPointDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type';\nimport isComplexFloatingPointDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isIntegerDataType from '@stdlib/ndarray-base-assert-is-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isRealDataType from '@stdlib/ndarray-base-assert-is-real-data-type';\nimport isNumericDataType from '@stdlib/ndarray-base-assert-is-numeric-data-type';\nimport isBooleanDataType from '@stdlib/ndarray-base-assert-is-boolean-data-type';\nimport isIntegerIndexDataType from '@stdlib/ndarray-base-assert-is-integer-index-data-type';\nimport isBooleanIndexDataType from '@stdlib/ndarray-base-assert-is-boolean-index-data-type';\nimport isMaskIndexDataType from '@stdlib/ndarray-base-assert-is-mask-index-data-type';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport promotionRules from '@stdlib/ndarray-promotion-rules';\nimport defaults from '@stdlib/ndarray-defaults';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_INDEX_DTYPE = defaults.get( 'dtypes.default_index' );\nvar DEFAULT_SIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.signed_integer' );\nvar DEFAULT_UNSIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.unsigned_integer' );\nvar DEFAULT_REAL_FLOATING_POINT_DTYPE = defaults.get( 'dtypes.real_floating_point' );\n\nvar POLICY_TABLE = {\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'floating_point_and_generic': [\n\t\twrap( isFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'real_floating_point_and_generic': [\n\t\twrap( isRealFloatingPointDataType ),\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\t'complex_floating_point_and_generic': [\n\t\twrap( isComplexFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'integer_and_generic': [\n\t\twrap( isIntegerDataType ),\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'signed_integer_and_generic': [\n\t\twrap( isSignedIntegerDataType ),\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer_and_generic': [\n\t\twrap( isUnsignedIntegerDataType ),\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\t'real_and_generic': [\n\t\twrap( isRealDataType ),\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\t'numeric_and_generic': [\n\t\twrap( isNumericDataType ),\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\n\t'boolean': [\n\t\tisBooleanDataType,\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\t'boolean_and_generic': [\n\t\twrap( isBooleanDataType ),\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\n\t'integer_index': [\n\t\tisIntegerIndexDataType,\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'integer_index_and_generic': [\n\t\twrap( isIntegerIndexDataType ),\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'boolean_index': [\n\t\tisBooleanIndexDataType,\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'boolean_index_and_generic': [\n\t\twrap( isBooleanIndexDataType ),\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'mask_index': [\n\t\tisMaskIndexDataType,\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t],\n\t'mask_index_and_generic': [\n\t\twrap( isMaskIndexDataType ),\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t]\n};\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a data type validation function to also check for a \"generic\" data type.\n*\n* @private\n* @param {Function} fcn - validation function\n* @returns {Function} wrapped validation function\n*/\nfunction wrap( fcn ) {\n\treturn wrapper;\n\n\t/**\n\t* Tests whether a provided data type is either \"generic\" or satisfies a data type validation function.\n\t*\n\t* @private\n\t* @param {*} value - input value\n\t* @returns {boolean} boolean indicating whether a provided value passes a test\n\t*/\n\tfunction wrapper( value ) {\n\t\treturn ( value === 'generic' ) || fcn( value );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p;\n\tif ( policy === 'default' ) {\n\t\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\t\treturn DEFAULT_DTYPE;\n\t}\n\tif ( policy === 'default_index' ) {\n\t\t// When the policy is \"default_index\", the output data type should always be the default index data type without consideration for the input data type:\n\t\treturn DEFAULT_INDEX_DTYPE;\n\t}\n\tif ( policy === 'same' || policy === 'promoted' ) { // note: for unary APIs, the \"promoted\" data type is the same as the input data type\n\t\treturn dtype;\n\t}\n\tif ( policy === 'accumulation' ) {\n\t\t// If the input data type is floating-point, allow accumulation in that data type as overflow/underflow is handled naturally as a built-in feature of that data type...\n\t\tif ( isFloatingPointDataType( dtype ) || dtype === 'generic' ) { // NOTE: we may want to revisit this in the future for float16/complex32, where the value range is much more limited\n\t\t\treturn dtype;\n\t\t}\n\t\t// Unless the input data type value range is larger than the default un/signed integer data type, accumulate in the default un/signed integer data type, as accumulating in small range integer data types (e.g., `int8`) are at high risk for overflow, especially for ndarrays containing many elements...\n\t\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\t\treturn promotionRules( dtype, DEFAULT_UNSIGNED_INTEGER_DTYPE );\n\t\t}\n\t\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\t\treturn promotionRules( dtype, DEFAULT_SIGNED_INTEGER_DTYPE );\n\t\t}\n\t\t// For all other input data types, accumulate in the default real-valued floating-point data type...\n\t\treturn DEFAULT_REAL_FLOATING_POINT_DTYPE;\n\t}\n\tp = POLICY_TABLE[ policy ];\n\tif ( p === void 0 ) {\n\t\t// Check for an explicit data type...\n\t\tif ( isDataType( policy ) ) {\n\t\t\treturn policy;\n\t\t}\n\t\tthrow new TypeError( format( '1dRDw', policy ) );\n\t}\n\tif ( p[ 0 ]( dtype ) ) {\n\t\treturn dtype;\n\t}\n\treturn p[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n"],"names":["DEFAULT_DTYPE","defaults","get","DEFAULT_INDEX_DTYPE","DEFAULT_SIGNED_INTEGER_DTYPE","DEFAULT_UNSIGNED_INTEGER_DTYPE","DEFAULT_REAL_FLOATING_POINT_DTYPE","POLICY_TABLE","floating_point","isFloatingPointDataType","floating_point_and_generic","wrap","real_floating_point","isRealFloatingPointDataType","real_floating_point_and_generic","complex_floating_point","isComplexFloatingPointDataType","complex_floating_point_and_generic","integer","isIntegerDataType","integer_and_generic","signed_integer","isSignedIntegerDataType","signed_integer_and_generic","unsigned_integer","isUnsignedIntegerDataType","unsigned_integer_and_generic","real","isRealDataType","real_and_generic","numeric","isNumericDataType","numeric_and_generic","boolean","isBooleanDataType","boolean_and_generic","integer_index","isIntegerIndexDataType","integer_index_and_generic","boolean_index","isBooleanIndexDataType","boolean_index_and_generic","mask_index","isMaskIndexDataType","mask_index_and_generic","fcn","value","resolve","dtype","policy","p","promotionRules","isDataType","TypeError","format"],"mappings":";;sxDA4CA,IAAIA,EAAgBC,EAASC,IAAK,kBAC9BC,EAAsBF,EAASC,IAAK,wBACpCE,EAA+BH,EAASC,IAAK,yBAC7CG,EAAiCJ,EAASC,IAAK,2BAC/CI,EAAoCL,EAASC,IAAK,8BAElDK,EAAe,CAClBC,eAAkB,CACjBC,EACAR,EAASC,IAAK,0BAEfQ,2BAA8B,CAC7BC,EAAMF,GACNR,EAASC,IAAK,0BAEfU,oBAAuB,CACtBC,EACAP,GAEDQ,gCAAmC,CAClCH,EAAME,GACNP,GAEDS,uBAA0B,CACzBC,EACAf,EAASC,IAAK,kCAEfe,mCAAsC,CACrCN,EAAMK,GACNf,EAASC,IAAK,kCAGfgB,QAAW,CACVC,EACAlB,EAASC,IAAK,mBAEfkB,oBAAuB,CACtBT,EAAMQ,GACNlB,EAASC,IAAK,mBAEfmB,eAAkB,CACjBC,EACAlB,GAEDmB,2BAA8B,CAC7BZ,EAAMW,GACNlB,GAEDoB,iBAAoB,CACnBC,EACApB,GAEDqB,6BAAgC,CAC/Bf,EAAMc,GACNpB,GAGDsB,KAAQ,CACPC,EACA3B,EAASC,IAAK,gBAEf2B,iBAAoB,CACnBlB,EAAMiB,GACN3B,EAASC,IAAK,gBAGf4B,QAAW,CACVC,EACA9B,EAASC,IAAK,mBAEf8B,oBAAuB,CACtBrB,EAAMoB,GACN9B,EAASC,IAAK,mBAGf+B,QAAW,CACVC,EACAjC,EAASC,IAAK,mBAEfiC,oBAAuB,CACtBxB,EAAMuB,GACNjC,EAASC,IAAK,mBAGfkC,cAAiB,CAChBC,EACApC,EAASC,IAAK,yBAEfoC,0BAA6B,CAC5B3B,EAAM0B,GACNpC,EAASC,IAAK,yBAEfqC,cAAiB,CAChBC,EACAvC,EAASC,IAAK,yBAEfuC,0BAA6B,CAC5B9B,EAAM6B,GACNvC,EAASC,IAAK,yBAEfwC,WAAc,CACbC,EACA1C,EAASC,IAAK,sBAEf0C,uBAA0B,CACzBjC,EAAMgC,GACN1C,EAASC,IAAK,uBAchB,SAASS,EAAMkC,GACd,OASA,SAAkBC,GACjB,MAAmB,YAAVA,GAAyBD,EAAKC,EACvC,CACF,CAkBA,SAASC,EAASC,EAAOC,GACxB,IAAIC,EACJ,GAAgB,YAAXD,EAEJ,OAAOjD,EAER,GAAgB,kBAAXiD,EAEJ,OAAO9C,EAER,GAAgB,SAAX8C,GAAgC,aAAXA,EACzB,OAAOD,EAER,GAAgB,iBAAXC,EAEJ,OAAKxC,EAAyBuC,IAAqB,YAAVA,EACjCA,EAGHvB,EAA2BuB,GACxBG,EAAgBH,EAAO3C,GAE1BiB,EAAyB0B,GACtBG,EAAgBH,EAAO5C,GAGxBE,EAGR,QAAW,KADX4C,EAAI3C,EAAc0C,IACE,CAEnB,GAAKG,EAAYH,GAChB,OAAOA,EAER,MAAM,IAAII,UAAWC,EAAQ,QAASL,GACtC,CACD,OAAKC,EAAG,GAAKF,GACLA,EAEDE,EAAG,EACX"}